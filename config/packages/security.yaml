security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            id: ApidaeTourisme\ApidaeBundle\ApidaeUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

            oauth:
                resource_owners:
                    apidae: "/login/check-apidae"
                login_path: /login
                use_forward: false
                failure_path: /login

                oauth_user_provider:
                    service: ApidaeTourisme\ApidaeBundle\ApidaeUserProvider

            logout:
                path: /logout
                target: /
                invalidate_session: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(login|logout|connect), roles: PUBLIC_ACCESS }
        - { path: ^/, roles: [PUBLIC_ACCESS] }
